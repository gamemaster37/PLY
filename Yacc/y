/* original parser id follows */
/* yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93" */
/* (use YYMAJOR/YYMINOR for ifdefs dependent on parser version) */

#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define YYPATCH 20140715

#define YYEMPTY        (-1)
#define yyclearin      (yychar = YYEMPTY)
#define yyerrok        (yyerrflag = 0)
#define YYRECOVERING() (yyerrflag != 0)
#define YYENOMEM       (-2)
#define YYEOF          0
#define YYPREFIX "yy"

#define YYPURE 0

#line 5 "Comp.y"
extern int column;
#line 23 "y"

#if ! defined(YYSTYPE) && ! defined(YYSTYPE_IS_DECLARED)
/* Default: YYSTYPE is the semantic value type. */
typedef int YYSTYPE;
# define YYSTYPE_IS_DECLARED 1
#endif

/* compatibility with bison */
#ifdef YYPARSE_PARAM
/* compatibility with FreeBSD */
# ifdef YYPARSE_PARAM_TYPE
#  define YYPARSE_DECL() yyparse(YYPARSE_PARAM_TYPE YYPARSE_PARAM)
# else
#  define YYPARSE_DECL() yyparse(void *YYPARSE_PARAM)
# endif
#else
# define YYPARSE_DECL() yyparse(void)
#endif

/* Parameters sent to lex. */
#ifdef YYLEX_PARAM
# define YYLEX_DECL() yylex(void *YYLEX_PARAM)
# define YYLEX yylex(YYLEX_PARAM)
#else
# define YYLEX_DECL() yylex(void)
# define YYLEX yylex()
#endif

/* Parameters sent to yyerror. */
#ifndef YYERROR_DECL
#define YYERROR_DECL() yyerror(const char *s)
#endif
#ifndef YYERROR_CALL
#define YYERROR_CALL(msg) yyerror(msg)
#endif

extern int YYPARSE_DECL();

#define OPAL 257
#define OPASS 258
#define COMP 259
#define STR 260
#define INT 261
#define DEC 262
#define LONG 263
#define IMG 264
#define VAR 265
#define SALTO 266
#define MULT 267
#define MENOS 268
#define MAS 269
#define FOR 270
#define IN 271
#define PASS 272
#define NOT 273
#define TRUE 274
#define FALSE 275
#define IS 276
#define AND 277
#define OR 278
#define IMPORT 279
#define RANGE 280
#define IF 281
#define ELIF 282
#define ELSE 283
#define FOR 284
#define IN 285
#define WHILE 286
#define BREAK 287
#define CONTINUE 288
#define PRINT 289
#define DEF 290
#define RETURN 291
#define YYERRCODE 256
typedef short YYINT;
static const YYINT yylhs[] = {                           -1,
    0,    0,    0,    0,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,   10,   10,   11,   11,
   12,   12,   12,   12,    2,   13,   13,   14,   14,    8,
    8,   16,   16,   16,   16,   16,   22,   19,   19,   19,
   21,   18,   25,   25,   20,   23,   23,   23,   23,   23,
   23,   23,   26,   26,   26,   26,   26,   27,   27,   27,
   24,   28,   28,    3,   17,   29,   29,    9,   31,   31,
   32,   32,    7,   33,   33,   33,   33,   33,    6,   30,
   30,   30,    5,   34,   34,    4,   35,   15,   15,
};
static const YYINT yylen[] = {                            2,
    1,    2,    2,    0,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    2,    0,    2,    1,    1,    1,
    1,    1,    1,    1,    4,    5,    1,    1,    1,    2,
    2,    1,    1,    1,    1,    1,    4,    1,    1,    1,
    7,    4,    3,    0,    2,    3,    2,    1,    1,    1,
    1,    3,    1,    1,    1,    1,    1,    1,    1,    1,
    5,    3,    0,    3,    4,    1,    3,    6,    5,    0,
    3,    0,    6,    1,    1,    1,    1,    1,    4,    1,
    1,    1,    6,    3,    0,    5,    1,    1,    0,
};
static const YYINT yydefred[] = {                         0,
   32,   21,   24,   22,   23,    0,   14,   20,   19,    5,
    0,    0,   50,   51,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    6,    7,    8,    9,   10,   11,
   12,   13,   48,    0,   18,    0,    0,    0,   34,   35,
   36,   39,    0,   40,   27,    0,    0,    0,    0,    0,
    0,   28,   29,   49,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    3,    0,    0,   17,   88,   30,
   31,   45,   53,   56,   55,   58,   59,   60,   54,    0,
   57,    0,    0,    0,    0,    0,    0,    0,   52,   64,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   25,    0,   42,    0,   65,   81,   82,
    0,    0,   76,    0,   75,   77,   78,    0,   79,    0,
    0,    0,    0,    0,    0,    0,   61,   43,   67,    0,
    0,    0,    0,    0,   87,   86,   26,   37,    0,   62,
    0,    0,   68,   73,   84,   83,   41,    0,    0,    0,
   71,   69,
};
static const YYINT yydgoto[] = {                         23,
   67,   25,   26,   27,   28,   29,   30,   31,   32,   33,
   34,   35,   49,   51,   70,   36,   37,   38,   39,   40,
   41,   42,   43,   44,   88,   80,   81,  103,   92,  112,
  131,  143,  118,  121,  136,
};
static const YYINT yysindex[] = {                       581,
    0,    0,    0,    0,    0,  -40,    0,    0,    0,    0,
  619,  284,    0,    0,  284, -247,  -21,  619, -245,  619,
  -12, -235,  550,  581,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -237,    0,  -28,  -28,  -59,    0,    0,
    0,    0, -178,    0,    0, -232,  307,  619,  619,  -29,
  -10,    0,    0,    0, -178,  -36,  -28,  640,  -23, -246,
  -18,  619,    7,  -17,    0,  581,  581,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  284,
    0,  -42,  -27,  -45,    5,  -28,  619,  -43,    0,    0,
    8,   17,  515,  -84,  515,   12,  581, -178,  619,  307,
  -34,  619,   31,    0,  -10,    0,  640,    0,    0,    0,
  581, -209,    0,  -16,    0,    0,    0,   19,    0,  619,
   41,  476,   34,   -8,  307,    5,    0,    0,    0,  619,
 -196,  515,   12,  -28,    0,    0,    0,    0,   -5,    0,
   44,   45,    0,    0,    0,    0,    0,  515,  515, -209,
    0,    0,
};
static const YYINT yyrindex[] = {                         3,
    0,    0,    0,    0,    0,   37,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   93,   15,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  249,  249,   69,    0,    0,
    0,    0,  133,    0,    0,    0,    0,    0,    0,    1,
    2,    0,    0,    0,  195,    0,  249,    0,    0,    0,
    0,    0,    0,    0,    0,   16,  144,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  -79,    0,   63,  249,    0,    0,    0,    0,
   65,    0,  146,    0,  146,   66, -183,  404,    0,    0,
  101,    0,    0,    0,    2,    0,    0,    0,    0,    0,
  146,  339,    0,   53,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   63,    0,    0,    0,    0,
  443,  146,   66,  249,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  146,  146,  339,
    0,    0,
};
static const YYINT yygindex[] = {                         0,
   21,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  -33,   78,   33,  848,    6,   18,   35,  -26,  -39,    0,
    0,   25,   -6,   99,   26,    0,    0,   -3,    0,  -78,
  -24,    0,    0,   -9,    0,
};
#define YYTABLESIZE 978
static const YYINT yytable[] = {                         48,
   49,   46,    4,   46,   89,   55,   11,   84,   56,   79,
   48,   72,   48,   49,    1,    2,  119,   57,   58,   60,
   24,   79,   79,    2,    3,    4,    5,   62,   52,   63,
   69,   11,   82,   87,   93,   52,   49,   52,   94,   95,
   97,   49,   71,   66,   49,   53,   48,  101,  102,  106,
   47,  107,   53,  144,   53,  120,  125,  108,   49,   49,
  124,   47,   90,  100,   79,   52,   52,  116,   33,  150,
  151,  127,  130,   98,  100,   91,  132,  137,   73,   52,
   74,  134,   53,   53,  138,  139,  142,  147,   75,    8,
    9,  104,   16,   49,   44,   49,   53,   76,   77,   78,
   37,  148,  149,   63,   52,   66,   85,   16,   33,   33,
   74,   68,   33,  111,   99,  111,   52,  122,  117,   52,
   64,   53,  140,  145,  129,  152,   33,   33,  115,    0,
  128,    0,   38,   53,    0,    0,   53,   52,    0,  146,
   37,   37,    0,   15,   37,   16,    0,   52,    0,    0,
    0,    0,  111,    0,   53,    0,    0,    0,   37,   37,
    0,   33,    0,    0,   53,    0,    0,    0,  111,  111,
    0,    0,   38,   38,    0,  113,   38,   49,    0,   49,
  114,    0,    0,    0,    0,    0,    0,   49,   49,   49,
   38,   38,    0,   37,   47,   17,   49,   49,   49,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   45,    0,   45,    0,    0,
   73,    0,   74,   38,    0,   38,    0,    0,    0,    0,
   75,    8,    9,    0,   47,   47,    0,    0,   47,   76,
   77,   78,    0,    0,    0,    0,    0,    0,   89,    0,
    0,    0,   47,   47,    0,    0,   49,   49,    4,   49,
   49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
    1,    2,   49,   49,   49,   49,   49,   49,   49,   49,
   49,   49,   49,   49,   49,   47,   49,   47,   89,   49,
   49,   49,   49,   49,    0,   49,   49,   49,   49,   49,
   49,   49,   49,   49,   49,   49,    0,    0,   49,   49,
   49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
   49,    0,   49,   15,   33,   49,   49,   49,   33,   33,
   33,   33,   33,   33,   33,    0,   33,   33,   70,   89,
   33,   33,   33,   33,    0,    0,   15,   33,   33,   33,
   33,   33,   33,    0,   33,    0,   37,   33,   33,   33,
   37,   37,   37,   37,   37,   37,   37,    0,   37,   37,
    0,    0,   37,   37,   37,   37,    0,    0,   70,   37,
   37,   37,   37,   37,   37,    0,   37,    0,   38,   37,
   37,   37,   38,   38,   38,   38,   38,   38,   38,   15,
    0,   16,    0,   46,   38,   38,   38,   38,    0,    0,
    0,   38,   38,   38,   38,   38,   38,    0,   38,    0,
    0,   38,   38,   38,    0,   15,   15,   16,   16,   70,
    0,    0,    0,    0,   15,    0,   16,    0,    0,    0,
    0,    0,   72,   46,   46,    0,    0,   46,    0,    0,
   47,    0,    0,    0,   47,   47,   47,   47,   47,   47,
   47,   46,   46,    0,    0,    0,   47,   47,   47,   47,
    0,    0,    0,   47,   47,   47,   47,   47,   47,    0,
   47,    0,   72,   47,   47,   47,    0,    0,    0,    0,
    0,    0,    0,    0,   46,    0,   46,    0,    0,    0,
    0,    0,    0,    0,   89,    0,    0,    0,   89,   89,
   89,   89,   89,   89,   89,   15,   89,   89,    0,    0,
   89,   89,   89,   89,    0,    0,    0,   89,   89,   89,
   89,   89,   89,   72,   89,    0,    0,   89,   89,   89,
    0,    0,    0,    0,    2,    3,    4,    5,   54,    0,
    0,    8,    9,    0,   15,    0,   12,   13,   14,    0,
    0,    0,    0,    0,    0,    0,   11,    2,    3,    4,
    5,   83,    0,    0,    8,    9,    0,    0,    0,   12,
   13,   14,    0,    0,    0,    0,    0,    0,    0,   15,
    0,    0,    0,    0,   70,    0,    0,    0,   70,   70,
   70,   70,   70,   70,   70,   11,   70,   70,    0,    0,
   70,   70,   70,   70,    0,    0,    0,   70,   70,   70,
   15,   70,   70,    0,   70,    0,    0,   70,   70,   70,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   11,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   15,   46,
    0,    0,    0,   46,   46,   46,   46,   46,   46,   46,
    0,   11,    0,    0,    0,   46,   46,   46,   46,   15,
    0,    0,   46,   46,   46,   46,   46,   46,    0,   46,
    0,    0,   46,   46,   46,    0,    0,    0,   72,    0,
    0,    0,   72,   72,   72,   72,   72,   72,   72,   11,
   72,   72,    0,    0,   72,   72,   72,   72,    0,    0,
    0,   72,   72,   72,   72,    0,   72,    0,   72,    0,
   11,   72,   72,   72,    0,    1,    2,    3,    4,    5,
    6,    7,    0,    8,    9,    0,    0,   10,   12,   13,
   14,    0,    0,    0,   16,   17,   18,    0,    0,   19,
    0,   20,    0,    0,   21,   22,  135,    0,    0,    0,
    0,    0,    0,    0,    1,    2,    3,    4,    5,    6,
    7,    0,    8,    9,    0,    0,   10,   12,   13,   14,
    0,    0,    0,   16,   17,   18,    0,    0,   19,    0,
   20,  109,  110,   21,   22,   65,    0,    0,    0,    1,
    2,    3,    4,    5,    6,    7,    0,    8,    9,    0,
    0,   10,   12,   13,   14,    0,    0,    0,   16,   17,
   18,    0,    0,   19,    0,   20,    0,    0,   21,   22,
    1,    2,    3,    4,    5,    6,    7,    0,    8,    9,
    0,    0,   10,   12,   13,   14,    0,    0,    0,   16,
   17,   18,    0,    0,   19,   59,   20,   61,    0,   21,
   22,    0,    0,    0,    0,    0,    0,    0,    1,    2,
    3,    4,    5,   50,    0,    0,    8,    9,    0,    0,
    0,   12,   13,   14,    0,   85,   86,    0,   17,    1,
    2,    3,    4,    5,   50,    0,    0,    8,    9,   96,
    0,    0,   12,   13,   14,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  105,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  123,    0,    0,  126,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  133,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  141,
};
static const YYINT yycheck[] = {                         40,
    0,   44,    0,   44,   41,   12,   91,   47,   15,   43,
   40,   38,   40,   93,    0,    0,   95,  265,   40,  265,
    0,   55,   56,  261,  262,  263,  264,   40,   11,  265,
   59,   91,  265,   44,   58,   18,    0,   20,  285,   58,
   58,   41,   37,   23,   44,   11,   40,   93,   44,   93,
   91,   44,   18,  132,   20,   44,   91,   41,   58,   59,
  100,   91,   57,   91,   98,   48,   49,   94,    0,  148,
  149,   41,  282,   80,   91,   58,   58,   44,  257,   62,
  259,   41,   48,   49,   93,  125,  283,   93,  267,  268,
  269,   86,    0,   93,   93,   59,   62,  276,  277,  278,
    0,   58,   58,   41,   87,   41,   41,  291,   40,   41,
   58,   34,   44,   93,   82,   95,   99,   97,   94,  102,
   22,   87,  126,  133,  107,  150,   58,   59,   94,   -1,
  105,   -1,    0,   99,   -1,   -1,  102,  120,   -1,  134,
   40,   41,   -1,    0,   44,    0,   -1,  130,   -1,   -1,
   -1,   -1,  132,   -1,  120,   -1,   -1,   -1,   58,   59,
   -1,   93,   -1,   -1,  130,   -1,   -1,   -1,  148,  149,
   -1,   -1,   40,   41,   -1,  260,   44,  257,   -1,  259,
  265,   -1,   -1,   -1,   -1,   -1,   -1,  267,  268,  269,
   58,   59,   -1,   93,    0,  280,  276,  277,  278,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  258,   -1,  258,   -1,   -1,
  257,   -1,  259,   91,   -1,   93,   -1,   -1,   -1,   -1,
  267,  268,  269,   -1,   40,   41,   -1,   -1,   44,  276,
  277,  278,   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,
   -1,   -1,   58,   59,   -1,   -1,  256,  257,  256,  259,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  256,  256,  272,  273,  274,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,   91,  286,   93,   40,  289,
  290,  291,  256,  257,   -1,  259,  260,  261,  262,  263,
  264,  265,  266,  267,  268,  269,   -1,   -1,  272,  273,
  274,  275,  276,  277,  278,  279,  280,  281,  282,  283,
  284,   -1,  286,   40,  256,  289,  290,  291,  260,  261,
  262,  263,  264,  265,  266,   -1,  268,  269,    0,   91,
  272,  273,  274,  275,   -1,   -1,   40,  279,  280,  281,
  282,  283,  284,   -1,  286,   -1,  256,  289,  290,  291,
  260,  261,  262,  263,  264,  265,  266,   -1,  268,  269,
   -1,   -1,  272,  273,  274,  275,   -1,   -1,   40,  279,
  280,  281,  282,  283,  284,   -1,  286,   -1,  256,  289,
  290,  291,  260,  261,  262,  263,  264,  265,  266,  256,
   -1,  256,   -1,    0,  272,  273,  274,  275,   -1,   -1,
   -1,  279,  280,  281,  282,  283,  284,   -1,  286,   -1,
   -1,  289,  290,  291,   -1,  282,  283,  282,  283,   91,
   -1,   -1,   -1,   -1,  291,   -1,  291,   -1,   -1,   -1,
   -1,   -1,    0,   40,   41,   -1,   -1,   44,   -1,   -1,
  256,   -1,   -1,   -1,  260,  261,  262,  263,  264,  265,
  266,   58,   59,   -1,   -1,   -1,  272,  273,  274,  275,
   -1,   -1,   -1,  279,  280,  281,  282,  283,  284,   -1,
  286,   -1,   40,  289,  290,  291,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   91,   -1,   93,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  260,  261,
  262,  263,  264,  265,  266,   40,  268,  269,   -1,   -1,
  272,  273,  274,  275,   -1,   -1,   -1,  279,  280,  281,
  282,  283,  284,   91,  286,   -1,   -1,  289,  290,  291,
   -1,   -1,   -1,   -1,  261,  262,  263,  264,  265,   -1,
   -1,  268,  269,   -1,   40,   -1,  273,  274,  275,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,  261,  262,  263,
  264,  265,   -1,   -1,  268,  269,   -1,   -1,   -1,  273,
  274,  275,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,
   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  260,  261,
  262,  263,  264,  265,  266,   91,  268,  269,   -1,   -1,
  272,  273,  274,  275,   -1,   -1,   -1,  279,  280,  281,
   40,  283,  284,   -1,  286,   -1,   -1,  289,  290,  291,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,  256,
   -1,   -1,   -1,  260,  261,  262,  263,  264,  265,  266,
   -1,   91,   -1,   -1,   -1,  272,  273,  274,  275,   40,
   -1,   -1,  279,  280,  281,  282,  283,  284,   -1,  286,
   -1,   -1,  289,  290,  291,   -1,   -1,   -1,  256,   -1,
   -1,   -1,  260,  261,  262,  263,  264,  265,  266,   91,
  268,  269,   -1,   -1,  272,  273,  274,  275,   -1,   -1,
   -1,  279,  280,  281,  282,   -1,  284,   -1,  286,   -1,
   91,  289,  290,  291,   -1,  260,  261,  262,  263,  264,
  265,  266,   -1,  268,  269,   -1,   -1,  272,  273,  274,
  275,   -1,   -1,   -1,  279,  280,  281,   -1,   -1,  284,
   -1,  286,   -1,   -1,  289,  290,  291,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  260,  261,  262,  263,  264,  265,
  266,   -1,  268,  269,   -1,   -1,  272,  273,  274,  275,
   -1,   -1,   -1,  279,  280,  281,   -1,   -1,  284,   -1,
  286,  287,  288,  289,  290,  256,   -1,   -1,   -1,  260,
  261,  262,  263,  264,  265,  266,   -1,  268,  269,   -1,
   -1,  272,  273,  274,  275,   -1,   -1,   -1,  279,  280,
  281,   -1,   -1,  284,   -1,  286,   -1,   -1,  289,  290,
  260,  261,  262,  263,  264,  265,  266,   -1,  268,  269,
   -1,   -1,  272,  273,  274,  275,   -1,   -1,   -1,  279,
  280,  281,   -1,   -1,  284,   18,  286,   20,   -1,  289,
  290,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  260,  261,
  262,  263,  264,  265,   -1,   -1,  268,  269,   -1,   -1,
   -1,  273,  274,  275,   -1,   48,   49,   -1,  280,  260,
  261,  262,  263,  264,  265,   -1,   -1,  268,  269,   62,
   -1,   -1,  273,  274,  275,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   87,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   99,   -1,   -1,  102,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  120,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  130,
};
#define YYFINAL 23
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 291
#define YYUNDFTOKEN 329
#define YYTRANSLATE(a) ((a) > YYMAXTOKEN ? YYUNDFTOKEN : (a))
#if YYDEBUG
static const char *const yyname[] = {

"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'",0,0,"','",0,0,0,0,0,0,0,0,0,0,0,0,0,"':'","';'",0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"OPAL","OPASS","COMP","STR","INT","DEC","LONG","IMG","VAR","SALTO","MULT",
"MENOS","MAS","FOR","IN","\"PASS\"","\"NOT\"","\"TRUE\"","\"FALSE\"","\"IS\"",
"\"AND\"","\"OR\"","\"IMPORT\"","\"RANGE\"","\"IF\"","\"ELIF\"","\"ELSE\"",
"\"FOR\"","\"IN\"","\"WHILE\"","\"BREAK\"","\"CONTINUE\"","\"PRINT\"","\"DEF\"",
"\"RETURN\"",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,"illegal-symbol",
};
static const char *const yyrule[] = {
"$accept : START",
"START : MULTISTART",
"START : START MULTISTART",
"START : START error",
"START :",
"MULTISTART : \"PASS\"",
"MULTISTART : DECLARACION",
"MULTISTART : IMPORT",
"MULTISTART : DEFF",
"MULTISTART : PRINT",
"MULTISTART : WHILEE",
"MULTISTART : FO",
"MULTISTART : DERAGEX",
"MULTISTART : IFF",
"MULTISTART : SALTO",
"MULTISTART : MULTISTART MULTISTART",
"MULTISTART :",
"NEWNUMBER : OPESTA NUMBER",
"NEWNUMBER : NUMBER",
"OPESTA : MAS",
"OPESTA : MENOS",
"NUMBER : INT",
"NUMBER : LONG",
"NUMBER : IMG",
"NUMBER : DEC",
"DECLARACION : VAR DECLA DERANGE END",
"DECLA : ',' VAR DECLA DERANGE ','",
"DECLA : OPASS",
"DERANGE : EXPRESSION",
"DERANGE : RANGE",
"DERAGEX : EXPRESSION END",
"DERAGEX : RANGE END",
"EXPRESSION : STR",
"EXPRESSION : LIST",
"EXPRESSION : CALLSITO",
"EXPRESSION : MATRIX",
"EXPRESSION : MATRIXCALL",
"LISTCALL : VAR '[' CALLSITO ']'",
"CALLSITO : NUMBEROP",
"CALLSITO : LISTCALL",
"CALLSITO : FUNCTION",
"MATRIXCALL : VAR '[' CALLSITO ']' '[' CALLSITO ']'",
"LIST : '[' DERANGE LI ']'",
"LI : ',' DERANGE LI",
"LI :",
"MATRIX : LIST LIST",
"NUMBEROP : NUMBEROP OPERATION NUMBEROP",
"NUMBEROP : \"NOT\" NUMBEROP",
"NUMBEROP : NEWNUMBER",
"NUMBEROP : VAR",
"NUMBEROP : \"TRUE\"",
"NUMBEROP : \"FALSE\"",
"NUMBEROP : '(' NUMBEROP ')'",
"OPERATION : OPAL",
"OPERATION : OPESTA",
"OPERATION : MULT",
"OPERATION : COMP",
"OPERATION : OPBOL",
"OPBOL : \"IS\"",
"OPBOL : \"AND\"",
"OPBOL : \"OR\"",
"FUNCTION : VAR '(' DERANGE FU ')'",
"FU : ',' DERANGE FU",
"FU :",
"IMPORT : \"IMPORT\" VAR END",
"RANGE : \"RANGE\" '(' RANG ')'",
"RANG : EXPRESSION",
"RANG : EXPRESSION ',' EXPRESSION",
"IFF : \"IF\" DERANGE ':' PLUSTART ELIF ELSE",
"ELIF : \"ELIF\" DERANGE ':' PLUSTART ELIF",
"ELIF :",
"ELSE : \"ELSE\" ':' PLUSTART",
"ELSE :",
"FO : \"FOR\" VAR \"IN\" FORIMP ':' PLUSTART",
"FORIMP : VAR",
"FORIMP : RANGE",
"FORIMP : STR",
"FORIMP : LIST",
"FORIMP : LISTCALL",
"WHILEE : \"WHILE\" DERANGE ':' PLUSTART",
"PLUSTART : MULTISTART",
"PLUSTART : \"BREAK\"",
"PLUSTART : \"CONTINUE\"",
"PRINT : \"PRINT\" '(' DERANGE CICLIKRANGE ')' END",
"CICLIKRANGE : ',' DERANGE CICLIKRANGE",
"CICLIKRANGE :",
"DEFF : \"DEF\" FUNCTION ':' MULTISTART RETU",
"RETU : \"RETURN\"",
"END : ';'",
"END :",

};
#endif

int      yydebug;
int      yynerrs;

int      yyerrflag;
int      yychar;
YYSTYPE  yyval;
YYSTYPE  yylval;

/* define the initial stack-sizes */
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH  YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 10000
#define YYMAXDEPTH  10000
#endif
#endif

#define YYINITSTACKSIZE 200

typedef struct {
    unsigned stacksize;
    YYINT    *s_base;
    YYINT    *s_mark;
    YYINT    *s_last;
    YYSTYPE  *l_base;
    YYSTYPE  *l_mark;
} YYSTACKDATA;
/* variables for the parser stack */
static YYSTACKDATA yystack;
#line 66 "Comp.y"
#include <stdio.h>




extern char yytext[];

int main( int argc, char *argv[] )
{
   
   extern FILE *yyin, *yyout; 
   if( argc == 2 ) {
	yyin = fopen(argv[1], "r"); 
    if(yyin == NULL) /* open failed */{ 
     fprintf(yyout,"error");
     exit(1);
     }
	yyout = fopen("salida.txt", "w");
     if(yyout == NULL) /* open failed */{ 
     fprintf(yyout,"error");
     exit(1);
     }
	yyparse(); 
    fprintf(yyout,"\nTabla de Identificadores \n");
    printf("Exitoooooooo..... PARA SERVIRTE \n");
   }
   else if( argc > 2 ) {
      printf("Too many arguments supplied.\n");
   }
   else {
      printf("One argument expected.\n");
   }

    return 0;
}

yyerror(char *s)
{
    fprintf(stderr, " line %d: %s\n", column, s);
}
#line 581 "y"

#if YYDEBUG
#include <stdio.h>		/* needed for printf */
#endif

#include <stdlib.h>	/* needed for malloc, etc */
#include <string.h>	/* needed for memset */

/* allocate initial stack or double stack size, up to YYMAXDEPTH */
static int yygrowstack(YYSTACKDATA *data)
{
    int i;
    unsigned newsize;
    YYINT *newss;
    YYSTYPE *newvs;

    if ((newsize = data->stacksize) == 0)
        newsize = YYINITSTACKSIZE;
    else if (newsize >= YYMAXDEPTH)
        return YYENOMEM;
    else if ((newsize *= 2) > YYMAXDEPTH)
        newsize = YYMAXDEPTH;

    i = (int) (data->s_mark - data->s_base);
    newss = (YYINT *)realloc(data->s_base, newsize * sizeof(*newss));
    if (newss == 0)
        return YYENOMEM;

    data->s_base = newss;
    data->s_mark = newss + i;

    newvs = (YYSTYPE *)realloc(data->l_base, newsize * sizeof(*newvs));
    if (newvs == 0)
        return YYENOMEM;

    data->l_base = newvs;
    data->l_mark = newvs + i;

    data->stacksize = newsize;
    data->s_last = data->s_base + newsize - 1;
    return 0;
}

#if YYPURE || defined(YY_NO_LEAKS)
static void yyfreestack(YYSTACKDATA *data)
{
    free(data->s_base);
    free(data->l_base);
    memset(data, 0, sizeof(*data));
}
#else
#define yyfreestack(data) /* nothing */
#endif

#define YYABORT  goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab

int
YYPARSE_DECL()
{
    int yym, yyn, yystate;
#if YYDEBUG
    const char *yys;

    if ((yys = getenv("YYDEBUG")) != 0)
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = YYEMPTY;
    yystate = 0;

#if YYPURE
    memset(&yystack, 0, sizeof(yystack));
#endif

    if (yystack.s_base == NULL && yygrowstack(&yystack) == YYENOMEM) goto yyoverflow;
    yystack.s_mark = yystack.s_base;
    yystack.l_mark = yystack.l_base;
    yystate = 0;
    *yystack.s_mark = 0;

yyloop:
    if ((yyn = yydefred[yystate]) != 0) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = YYLEX) < 0) yychar = YYEOF;
#if YYDEBUG
        if (yydebug)
        {
            yys = yyname[YYTRANSLATE(yychar)];
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack) == YYENOMEM)
        {
            goto yyoverflow;
        }
        yystate = yytable[yyn];
        *++yystack.s_mark = yytable[yyn];
        *++yystack.l_mark = yylval;
        yychar = YYEMPTY;
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;

    YYERROR_CALL("syntax error");

    goto yyerrlab;

yyerrlab:
    ++yynerrs;

yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yystack.s_mark]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *yystack.s_mark, yytable[yyn]);
#endif
                if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack) == YYENOMEM)
                {
                    goto yyoverflow;
                }
                yystate = yytable[yyn];
                *++yystack.s_mark = yytable[yyn];
                *++yystack.l_mark = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *yystack.s_mark);
#endif
                if (yystack.s_mark <= yystack.s_base) goto yyabort;
                --yystack.s_mark;
                --yystack.l_mark;
            }
        }
    }
    else
    {
        if (yychar == YYEOF) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = yyname[YYTRANSLATE(yychar)];
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
        yychar = YYEMPTY;
        goto yyloop;
    }

yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    if (yym)
        yyval = yystack.l_mark[1-yym];
    else
        memset(&yyval, 0, sizeof yyval);
    switch (yyn)
    {
case 14:
#line 11 "Comp.y"
	{column++;}
break;
#line 787 "y"
    }
    yystack.s_mark -= yym;
    yystate = *yystack.s_mark;
    yystack.l_mark -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++yystack.s_mark = YYFINAL;
        *++yystack.l_mark = yyval;
        if (yychar < 0)
        {
            if ((yychar = YYLEX) < 0) yychar = YYEOF;
#if YYDEBUG
            if (yydebug)
            {
                yys = yyname[YYTRANSLATE(yychar)];
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == YYEOF) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *yystack.s_mark, yystate);
#endif
    if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack) == YYENOMEM)
    {
        goto yyoverflow;
    }
    *++yystack.s_mark = (YYINT) yystate;
    *++yystack.l_mark = yyval;
    goto yyloop;

yyoverflow:
    YYERROR_CALL("yacc stack overflow");

yyabort:
    yyfreestack(&yystack);
    return (1);

yyaccept:
    yyfreestack(&yystack);
    return (0);
}
